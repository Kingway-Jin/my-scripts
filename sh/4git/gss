#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# gss -- produce the current git repo(s) status on STDOUT
#
# Kingway Jin <kingway.w.jin@gmail.com> [https://github.com/Kingway-Jin]

black='\\033[0;30m'
darkgray='\\\\033[1;30m'
blue='\\\\033[0;34m'
lightBlue='\\\\033[1;34m'
green='\\\\033[0;32m'
lightgreen='\\\\033[1;32m'
cyan='\\\\033[0;36m'
lightcyan='\\\\033[1;36m'
red='\\\\033[0;31m'
lightred='\\\\033[1;31m'
purple='\\\\033[0;35m'
lightpurple='\\\\033[1;35m'
brown='\\\\033[0;33m'
yellow='\\\\033[1;33m'
lightgray='\\\\033[0;37m'
white='\\\\033[1;37m'
nocolor='\\\\033[0m'

function _gitstatus() {
	git remote update 1>/dev/null 2>&1

	if [ -z "${__GIT_PROMPT_DIR}" ]; then
	  SOURCE="${BASH_SOURCE[0]}"
	  while [ -h "${SOURCE}" ]; do
		DIR="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"
		SOURCE="$(readlink "${SOURCE}")"
		[[ $SOURCE != /* ]] && SOURCE="${DIR}/${SOURCE}"
	  done
	  __GIT_PROMPT_DIR="$( cd -P "$( dirname "${SOURCE}" )" && pwd )"
	fi

	gitstatus=$( LC_ALL=C git status --untracked-files=${__GIT_PROMPT_SHOW_UNTRACKED_FILES:-all} --porcelain --branch )

	# if the status is fatal, exit now
	[[ "$?" -ne 0 ]] && exit 0

	num_staged=0
	num_changed=0
	num_conflicts=0
	num_untracked=0
	while IFS='' read -r line || [[ -n "$line" ]]; do
	  status=${line:0:2}
	  while [[ -n $status ]]; do
		case "$status" in
		  #two fixed character matches, loop finished
		  \#\#) branch_line="${line/\.\.\./^}"; break ;;
		  \?\?) ((num_untracked++)); break ;;
		  U?) ((num_conflicts++)); break;;
		  ?U) ((num_conflicts++)); break;;
		  DD) ((num_conflicts++)); break;;
		  AA) ((num_conflicts++)); break;;
		  #two character matches, first loop
		  ?M) ((num_changed++)) ;;
		  ?D) ((num_changed++)) ;;
		  ?\ ) ;;
		  #single character matches, second loop
		  U) ((num_conflicts++)) ;;
		  \ ) ;;
		  *) ((num_staged++)) ;;
		esac
		status=${status:0:(${#status}-1)}
	  done
	done <<< "$gitstatus"

	num_stashed=0
	if [[ "$__GIT_PROMPT_IGNORE_STASH" != "1" ]]; then
	  stash_file="$( git rev-parse --git-dir )/logs/refs/stash"
	  if [[ -e "${stash_file}" ]]; then
		while IFS='' read -r wcline || [[ -n "$wcline" ]]; do
		  ((num_stashed++))
		done < ${stash_file}
	  fi
	fi

	clean=0
	if (( num_changed == 0 && num_staged == 0 && num_untracked == 0 && num_conflicts == 0)) ; then
	  clean=1
	fi

	IFS="^" read -ra branch_fields <<< "${branch_line/\#\# }"
	branch="${branch_fields[0]}"
	remote=
	upstream=
	ahead=
	behind=


	if [[ "$branch" == *"Initial commit on"* ]]; then
	  IFS=" " read -ra fields <<< "$branch"
	  branch="${fields[3]}"
	  remote="L"
	elif [[ "$branch" == *"no branch"* ]]; then
	  tag=$( git describe --tags --exact-match )
	  if [[ -n "$tag" ]]; then
		branch="$tag"
	  else
		branch="_PREHASH_$( git rev-parse --short HEAD )"
	  fi
	else
	  if [[ "${#branch_fields[@]}" -eq 1 ]]; then
		remote="L"
	  else
		IFS="[,]" read -ra remote_fields <<< "${branch_fields[1]}"
		upstream="${remote_fields[0]}"
		for remote_field in "${remote_fields[@]}"; do
		  if [[ "$remote_field" == *ahead* ]]; then
			num_ahead=${remote_field:6}
			ahead="->${num_ahead}" #"↑${num_ahead}"
		  fi
		  if [[ "$remote_field" == *behind* ]]; then
			num_behind=${remote_field:7}
			num_behind=${num_behind# }
			behind="<-${num_behind}" #"↓${num_behind# }"
		  fi
		done
		remote="${behind}${ahead}"
	  fi
	fi

	if [[ -z "$remote" ]] ; then
	  remote='.'
	fi

	if [[ -z "$upstream" ]] ; then
	  upstream='^'
	fi

	if [ $clean -eq "0" ]; then
		printf "$branch $remote $upstream "
		[ "$num_staged" -ne 0 ] && printf "~$num_staged" #"●$num_staged"
		[ "$num_conflicts" -ne 0 ] && printf "x$num_conflicts" #"✖$num_conflicts"
		[ "$num_changed" -ne 0 ] && printf "*$num_changed" #"✚$num_changed"
		[ "$num_untracked" -ne 0 ] && printf "?$num_untracked" #"…$num_untracked"
		[ "$num_stashed" -ne 0 ] && printf "#$num_stashed" #"⚑$num_stashed"
	else
		if [ 0"$num_behind" -gt 0 ] && [ 0"${num_ahead}" -eq 0 ] && `git pull 1>/dev/null 2>&1`; then
			printf "$branch |<$num_behind $upstream " #"✔"
			[ "$num_stashed" -ne 0 ] && printf "#$num_stashed" || printf "." #"✔"
		else
			printf "$branch $remote $upstream " #"✔"
			[ "$num_stashed" -ne 0 ] && printf "#$num_stashed" || printf "." #"✔"
		fi
	fi
}

branch_filter=$1

function justDoIt() {
	CURDIR=`pwd`
	if [ -d ".git" ]; then
		_gitstatus
	else
		TMP_FILE_PREFIX=`date +%N`
		TMP_FILE_PREFIX="gss-${TMP_FILE_PREFIX}-"
		for dir in `ls -1d ./*`; do
			dir=${dir#./}
			dir=${dir%/}
			if [ -d "$dir/.git" ]; then
				cd "$dir"
				branch_name=`git branch | grep \* | cut -d ' ' -f2`
				if [[ -z "${branch_filter}" ]] || [[ "${branch_filter}" == "${branch_name}" ]]; then
					_gitstatus > "/tmp/${TMP_FILE_PREFIX}${dir}" &
				fi
				cd "$CURDIR"
			fi
		done
		wait
		for gssfile in `ls -1 /tmp/${TMP_FILE_PREFIX}* 2>/dev/null`; do
			dir=${gssfile#*$TMP_FILE_PREFIX}
			gss_str=`cat $gssfile`
			echo "$gss_str $dir"
		done
		rm -f /tmp/${TMP_FILE_PREFIX}* 1>/dev/null 2>&1
	fi
}

justDoIt | column -t | \
awk '{if (NR%2) print "#zebra2"$0; else print "#zebra1"$0;}' | \
sed "s/^\(#zebra[12]\)\(.*\)\(<-[0-9]\+\)/\1\2${red}\3\1/g" | \
sed "s/^\(#zebra[12]\)\(.*\)\(->[0-9]\+\)/\1\2${red}\3\1/g" | \
sed "s/^\(#zebra[12]\)\(.*\)\(~[0-9]\+\)/\1\2${green}\3\1/g" | \
sed "s/^\(#zebra[12]\)\(.*\)\(x[0-9]\+\)/\1\2${red}\3\1/g" | \
sed "s/^\(#zebra[12]\)\(.*\)\(*[0-9]\+\)/\1\2${brown}\3\1/g" | \
sed "s/^\(#zebra[12]\)\(.*\)\(#[0-9]\+\)/\1\2${blue}\3\1/g" | \
sed "s/^\(#zebra[12]\)\(.*\)\(?[0-9]\+\)/\1\2${lightgray}\3\1/g" | \
sed "s/|</<-/g" | \
sed "s/#zebra1/${darkgray}/g" | \
sed "s/#zebra2/${nocolor}/g" | \
{ while read line; do printf "$line\n"; done }
